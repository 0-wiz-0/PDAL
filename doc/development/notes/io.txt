.. _io:

=====================
I/O Streams and Files
=====================

Given the sheer volume of data being processed by PDAL apps, it is very
important we pay attention to I/O speed.

In some quarters, there are yet some questions as to whether C-style I/O
(FILE*) or C++-style I/O (streams) is more efficient.  The answer, however,
is most likely to be very dependent on the platform being used, how the 
specific APIs are used, and the actual I/O patterns or traces.


Guidelines
==========

Unless strong (empirical, quantitative) evidence can be presented for a
specific workflow, PDAL will follow these guidelines.

* C++-stlye streams should be used instead of C-style FILE* calls.

* Streams should be instantiated using Boost's I/O library, not the native
  std\:: library.
  
* Where appropriate, public interfaces should accept as inputs std\:: base classes
  (as opposed to Boost-based classes).  Implementations should use std\:: library
  calls as opposed to methods which require Boost-specific stream classes.

* The PDAL API provides helper functions for opening and closing file
  streams.  Applications should prefer to use those over writing their own.

* Objects should provide an operator<< method for debugging purposes.

* Formatted (text, non-binary) I/O is (typically) not performance sensitive.
  For consistency, however, C++ stream I/O should be used here too; do not
  use printf/scanf.
