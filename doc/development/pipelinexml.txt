.. _development_pipelinexml:

============
Pipeline XML
============

This note describes the XML structure used for describing pipelines.

The pipeline XML syntax mirrors very closely the Stage class hierarchy
and construction format used by the C++ API.

We have two use cases specifically in mind:

    * a command-line app that reads an XML file to allow a user to easily
      construct arbitrary writer pipelines, as opposed to having to build apps
      custom to individual needs with arbitary options, filters, etc
      
    * a user can provide XML for a reader
      pipeline, construct it via a simple call to the PipelineManager API,
      and then use the Stage read() function to perform the read and and
      then do any processing of the points.  This style of operation
      is very appropriate for using PDAL from within environments
      like Python where the focus is on just getting the points,
      as opposed to complex pipeline construction.


Examples
========

A pipeline which reads two files, input1.las and input2.las, crops the points
to a certain bounding box, and then writes the result as a compressed LAS file,
output.laz::

    <?xml version="1.0" encoding="utf-8"?>
    <Pipeline version="1.0">
        <Writer type="drivers.las.writer">
            <Option name="filename">output.laz</Option>
            <Option name="compression">true</Option>
            <Filter type="filters.crop">
                <Option name="bounds">([0,1000000],[0,1000000],[0,1000000])</Option>
                <MultiFilter type="filters.mosaic">
                  <Reader type="drivers.las.reader">
                    <Option name="filename">input1.las</Option>
                  </Reader>
                  <Reader type="drivers.las.reader">
                    <Option name="filename">input1.las</Option>
                  </Reader>
                </MultiFilter>
            </Filter>
        </Writer>
    </Pipeline>


Syntax Specification
====================

* <Pipeline>

    * this is the root element for all pipeline xml

    * mandatory

    * child elements:

        * exactly one of the following four:

            * <Writer> element, for writer pipelines

            * <Reader> or <Filter> or <MultiFilter> element, for reader pipelines
  
  * attributes:
  
    * the "version" attribute must appear exactly once; the value of this
      attribute shall be the string "1.0"

* <Writer>

    * indicates a writer stage

    * child elements:

        * zero or more <Option> elements

        * exactly one <Reader> or <Filter> or <MultiFilter> element
    
  * attributes:
  
    * the "type" attribute must appear exactly once; the value of this
      attribute shall be the string corresponding to the name of
      the Writer stage type, e.g. "drivers.las.writer"

* <Reader>

    * indicates a reader stage

    * child elements:

        * zero or more <Option> elements

  * attributes:
  
    * the "type" attribute must appear exactly once; the value of this
      attribute shall be the string corresponding to the name of
      the Reader stage type, e.g. "drivers.las.reader"

* <Filter>

    * indicates a filter stage

    * child elements:

        * zero or more <Option> elements

        * exactly one <Reader> or <Filter> or <MultiFilter> element

  * attributes:
  
    * the "type" attribute must appear exactly once; the value of this
      attribute shall be the string corresponding to the name of
      the filter stage type, e.g. "filters.crop"

* <MultiFilter>

    * indicates a multifilter stage (filter than takes >1 input stage)

    * child elements:

        * zero or more <Option> elements

        * one or more <Reader> or <Filter> or <MultiFilter> elements

  * attributes:
  
    * the "type" attribute must appear exactly once; the value of this
      attribute shall be the string corresponding to the name of
      the MultiFilter stage type, e.g. "filter.mosaic"

* <Option>

    * indicates an option parameter to the pipeline stage

    * may only be a child of a <Reader>, <Writer>, <Filter>, or <MultiFilter> element

    * attributes:
  
        * the "name" attribute must appear exactly once; the value of this
          attribute shall be the name of the option, e.g. "filename"
 
    * no child elements
  
    * content:

        * the content of the element shall be the string representing the
      value of the option, e.g. "input.las"


Notes
=====

* In the implementation, boost::property_tree are used to read and write the pipelines.
  This means less parsing hassle for us, but also means we can't produce
  decent error messages (esp. since we don't have line numbers).

* The schema is intended to be something that can be validated via XSD,
  although we don't do that today.  (There is an XSD file in the schemas
  directory.)

* tbd: describe rule for interpreting file paths as relative to the
  xml file
  