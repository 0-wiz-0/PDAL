.. _dependencies:

==============================================================================
Dependencies
==============================================================================

:Author: Howard Butler
:Contact: hobu.inc at gmail.com
:Date: 3/19/2012

PDAL explicitly stands on the shoulders of giants that have come before it. 
Specifically, PDAL depends on a number of libraries to do its work including: 

* Boost_
* GDAL_
* Proj.4_
* GeoTIFF_
* libxml2_
* Oracle Call Interface (OCI_)

Boost
------------------------------------------------------------------------------

PDAL attempts to constrain its code-love for Boost and not always try to 
use the latest and the greatest, but instinct is hard to control. Specifically, 
PDAL takes advantage of a number of late-version features in boost::accumulators 
for statistics filtering, and as of this writing, it should be assumed that the 
minimum version required for Boost is 1.48.  Other versions less than that 
may work with some minor modifications or ``#ifdef``'ing, but the PDAL 
developers currently track rather late versions of Boost.

To that end, PDAL embeds a custom version of Boost_ in the ./boost directory 
of the source tree.  It can be activated with the ``-DPDAL_BOOST_EMBED=ON`` 
CMake_ environment variable. Expect that the embedded Boost_ version is the 
active version used by the developers, and in nearly all situations you can 
just use the embedded Boost solution for your own builds.

* Boost 1.48+ is required.

.. note::
    
    PDAL_BOOST_EMBED also causes the Boost_ build in ./boost to be namespaced 
    and aliased as ``pdalboost::`` rather than merely ``boost::``. The advantage 
    here is you can mix in PDAL-based code using an embedded Boost_ version 
    with code from your own Boost build. This isn't something that is actively 
    tested, however, and there may be leakage across the PDAL API of Boost 
    data types in this scenario. If you find something, please let us know.

Boost Packages Used
..............................................................................

An unexhaustive list includes:

* Unittest
* Accumulators
* Filesystem
* Program Options
* Property Tree
* Random
* IO Streams
* System
* cstdint
* String Algorithms
* Endian
* UUID


GDAL
------------------------------------------------------------------------------

PDAL uses GDAL for spatial reference system description manipulation and image 
reading and writing supporting for the NITF driver. In conjunction with GeoTIFF_, 
GDAL is used to convert GeoTIFF keys and OGC WKT SRS description strings into 
formats required by specific drivers. While PDAL can be built without GDAL 
support, if you want SRS manipulation and description ability, you must have 
GDAL (and GeoTIFF_) linked in at compile time.

Obtain `GDAL`_ via whatever method is convenient.  Linux platforms such as 
`Debian`_ have `DebianGIS`_, Mac OS X has the `KyngChaos`_ software frameworks, 
and Windows has the `OSGeo4W`_ platform.  

* GDAL 1.9+ is required.

.. warning::
    If you are using `OSGeo4W`_ as your provider of GDAL, you must make sure 
    to use the GDAL 1.9 package.

GeoTIFF
------------------------------------------------------------------------------

PDAL uses GeoTIFF in conjunction with GDAL for GeoTIFF key support in the 
LAS driver.  Obtain `libgeotiff`_ from the same place you got `GDAL`_.

* libgeotiff 1.3.0+ is required

.. note::
    `GDAL` surreptitiously embeds a copy of `libgeotiff`_ in its library build 
    but there is no way for you to know this.  In addition to embedding 
    libgeotiff, it also strips away the library symbols that PDAL needs, 
    meaning that PDAL can't simply link against `GDAL`_.  If you are 
    building both of these libraries yourself, make sure you build GDAL 
    using the "External libgeotiff" option, which will prevent the 
    insanity that can ensue on some platforms.  `OSGeo4W`_ users, including 
    those using that platform to link and build PDAL themselves, do 
    not need to worry about this issue.

Proj.4
------------------------------------------------------------------------------

Proj.4_ is the projection engine that PDAL uses for the :ref:`reprojection filter<reprojection>`.

* Proj.4 4.9.0+ is required.

libxml2
------------------------------------------------------------------------------

libxml2_ is used to serialize PDAL :cpp:class:`pdal::Schema` to- and fro- to raw XML.

* libxml 2.7.0+ is required. Older versions may also work but are untested.

`OCI`_
------------------------------------------------------------------------------

Obtain the `Oracle Instant Client`_ and install in a location on your system.
Be sure to install both the "Basic" and the "SDK" modules. Set your
``ORACLE_HOME`` environment variable system- or user-wide to point to this
location so the CMake configuration can find your install.

.. warning::
    `OCI`_'s libraries are inconsistently named.  You may need to create 
    symbolic links for some library names in order for the `CMake`_ to find 
    them::
        
        cd $ORACLE_HOME
        ln -s libocci.so.11.1 libocci.so
        ln -s libclntsh.so.11.1 libclntsh.so
        ln -s libociei.so.11.1 libociei.so

* OCI 10g+ is required.

.. note::
    MSVC should only require the oci.lib and oci.dll library and dlls.

.. _`Oracle Instant Client`: http://www.oracle.com/technology/tech/oci/instantclient/index.html
.. _`OCI`: http://www.oracle.com/technology/tech/oci/index.html
.. _`Oracle Point Cloud`: http://download.oracle.com/docs/cd/B28359_01/appdev.111/b28400/sdo_pc_pkg_ref.htm
.. _`DebianGIS`: http://wiki.debian.org/DebianGis
.. _`Debian`: http://www.debian.org
.. _`KyngChaos`: http://www.kyngchaos.com/software/unixport
.. _`OSGeo4W`: http://trac.osgeo.org/osgeo4w/

.. _Boost: http://www.boost.org
.. _GDAL: http://www.gdal.org
.. _Proj.4: http://trac.osgeo.org/proj
.. _GeoTIFF: http://trac.osgeo.org/geotiff
.. _libxml2: http://xmlsoft.org
.. _CMake: http://www.cmake.org

