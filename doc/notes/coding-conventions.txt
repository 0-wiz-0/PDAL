==================
Coding Conventions
==================

To the extent possible and reasonable, we value consistency of source code
formatting, class and variable naming, and so forth.

This Note lists some such conventions that we would like to follow, where
it makes sense to do so.


Source Formatting
=================

We use astyle (http://astyle.sourceforge.net) as a tool to reformat C++
source code files in a consistent fashion.  The file astylerc, at the top
of the hg repo, contains the default settings we use.

Our conventions are:

* LF endings, not CRLF

* spaces, not tabs

* indent to four (4) spaces ("Four shalt be the number thou shalt count, 
  and the number of the counting shall be four. Three shalt thou not count, 
  neither count thou five...")

* braces shall be on their own lines, like this::

    if (p)
    {
       foo();
    }


Naming Conventions
==================

* classes should be names using UpperCamelCase

* functions should be in lowerCamelCase

* member variables should be prefixed with "m\_", followed by the name in
  lowerCamelCase -- for example, "m_numberOfPoints"

* there should be only one class per file, and the name of the file should 
  match the class name -- that is, class PointData should live in files
  PointData.hpp and PointData.cpp


Other Conventions
=================

* the use of getter and setter methods is preferred to exposing member
  variables
  
* Surround all code with "namespace libpc {...}"; where justifiable, you 
  may introduce a nested namespace.  Keep non-public names in the 
  libpc::detail\:: space.
  
* Use exceptions for exceptional events that are not going to be handled 
  directly within the context of where the event occurs.  Avoid status
  codes.  See exceptions.hpp for a set of libpc-specific exception types 
  you may throw.


Layout/Organization of Source Tree
==================================

* public headers in ./include
    
* private headers alongside source files in src/

* ...
