.. height:

==============================
Calculating Normalized Heights
==============================

:Author: Bradley Chambers
:Contact: brad.chambers@gmail.com
:Date: 11/11/2015


This tutorial will describe the creation of a new filter for calculating normalized heights, :ref:`filters.height`.

Introduction
-------------------------------------------------------------------------------

Normalized heights are a commonly used attribute of point cloud data. This can also be referred to as _height above ground_ (HAG) or _above ground level_ (AGL) heights. In the end, it is simply a measure of a point's relative height as opposed to its raw elevation value.

The process of computing normalized heights is straightforward. First, we must have an estimate of the underlying terrain model. With this we can compute the difference between each point's elevation and the elevation of the terrain model at the same XY coordinate. The quality of the normalized heights will be a function of the quality of the terrain model, which of course depends on the quality of the ground segmentation approach and any interpolation that is required to arrive at the terrain elevation for a given XY coordinate.

We will use a nearest neighbor interpolation scheme to estimate terrain elevations. While this may not be the most accurate approach, it is available in PDAL today, and we hope it will inspire you to implement your own methods.

Approach
-------------------------------------------------------------------------------

For the height filter, we only assume that our input point cloud has an already existing ``Classification`` dimension with some subset of points marked as ground (``Classification=2``). This could, for example, be generated by :ref:`filters.ground` (see :ref:`pcl_ground`), but you can use whichever method you choose, as long as the ground returns are marked.

The bulk of our processing is actually taking place within PCL. For convenience, we've defined:

.. code-block:: cpp

    typedef pcl::PointCloud<pcl::PointXYZ> Cloud;

Our first step is to convert the filter's incoming PDAL ``PointView`` to a PCL ``PointCloud``, which requires that we first calculate our bounds so that we can subtract our XYZ offsets in the conversion step.

.. literalinclude:: ../../plugins/pcl/filters/HeightFilter.cpp
   :language: cpp
   :lines: 97-101

Next, we will create two vectors of indices - one for ground returns, one for non-ground returns - and make our first pass through the point cloud to populate these.

.. literalinclude:: ../../plugins/pcl/filters/HeightFilter.cpp
   :language: cpp
   :lines: 103-117

With our ground indices identified, we can use PCL to extract the ground returns into a new ``PointCloud``.

.. literalinclude:: ../../plugins/pcl/filters/HeightFilter.cpp
   :language: cpp
   :lines: 119-125

We repeat the extraction now, flipping ``setNegative`` from false to true to extract the non-ground returns into a new ``PointCloud``.

.. literalinclude:: ../../plugins/pcl/filters/HeightFilter.cpp
   :language: cpp
   :lines: 127-129

To compute the normalized height, we wish to find the nearest ground point for each non-ground point. Here, we achieve this by using a nearest neighbor interpolation scheme. One may prefer to use a more sophisticated interpolation scheme, but that is beyond the scope of this tutorial. We begin by defining model coefficients that will allow us to project the ground and non-ground clouds into the XY plane.

.. literalinclude:: ../../plugins/pcl/filters/HeightFilter.cpp
   :language: cpp
   :lines: 134-138

We can now project the ground points

.. literalinclude:: ../../plugins/pcl/filters/HeightFilter.cpp
   :language: cpp
   :lines: 141-147

followed by the non-ground points

.. literalinclude:: ../../plugins/pcl/filters/HeightFilter.cpp
   :language: cpp
   :lines: 149-152

Next, we create a KdTree to accelerate our nearest neighbor search. The tree is composed of only ground returns, as our non-ground returns will serve as query points for the nearest neighbor search.

.. literalinclude:: ../../plugins/pcl/filters/HeightFilter.cpp
   :language: cpp
   :lines: 154-156

We iterate over each of our projected non-ground points, searching for our nearest neighbor in the ground points. Using the indices of each the query (non-ground) and nearest neighbor (ground), we can retrieve the Z dimension from the input cloud, compute the height, and set this field in our original ``PointView``.

.. literalinclude:: ../../plugins/pcl/filters/HeightFilter.cpp
   :language: cpp
   :lines: 158-170

The only thing left is to set the height field to 0.0 for each of the ground points.

.. literalinclude:: ../../plugins/pcl/filters/HeightFilter.cpp
   :language: cpp
   :lines: 172-173
