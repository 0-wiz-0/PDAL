.. _pipeline:

******************************************************************************
Pipeline
******************************************************************************

:Author: Howard Butler
:Contact: hobu.inc at gmail dot com
:Date: 5/31/2012

Pipelines are the operative construct in PDAL -- you must construct pipelines
to perform data translation operations, filter data, or simply to provide data
to an endpoint. This document describes some features and background of PDAL
Pipelines and give some examples you can use to execute translation
operations.

Playing Dolls
------------------------------------------------------------------------------

A `Pipeline` is composed as a set of `Matryoshka dolls`_, with the outside 
or largest doll being the final endpoint of the pipeline, and the inner-most 
doll being the starting point. Each "doll" in the set represents a 
:cpp:class:`pdal::Stage` with its subsequent operations happening at that 
point as data are pulled through the pipeline from the starting point to 
end point.  

There are two primary building blocks in PDAL, :cpp:class:`pdal::Stage` and
:cpp:class:`pdal::PointBuffer`. :cpp:class:`pdal::Reader`,
:cpp:class:`pdal::Writer`, and :cpp:class:`pdal::Filter` are all subclasses of
:cpp:class:`pdal::Stage` that provide the concrete dolls for the Matryoshka set. 

:cpp:class:`pdal::PointBuffer` is the substrate that flows between stages in a 
pipeline and transfers the actual data as it moves through the pipeline. A 
:cpp:class:`pdal::PointBuffer` contains a :cpp:class:`pdal::Schema`, which 
itself contains a list of :cpp:class:`pdal::Dimension` objects that define the 
actual channels that are stored in the :cpp:class:`pdal::PointBuffer`.  

PDAL provides four types of stages -- :cpp:class:`pdal::Reader`,
:cpp:class:`pdal::Writer`, :cpp:class:`pdal::Filter`, and
:cpp:class:`pdal::MultiFilter` -- with the latter being hardly used at this
point. A Reader is a producer of data, a Writer is a consumer of data, and a
Filter is an actor on data.

.. note::
    The current implementation of PointBuffer stores the point data in an 
    interleaved fashion. It is probable that a subclass of PointBuffer will 
    come along that stores the data non-interleaved for situations where that 
    data arrangement is well-suited. Patches graciously accepted :)
    
A diversion about :cpp:class:`pdal::Schema` and :cpp:class:`pdal::Dimension`
..............................................................................

The :cpp:class:`pdal::PointBuffer` is composed of a :cpp:class:`pdal::Schema`
that itself contains a list of :cpp:class:`pdal::Dimension` objects. A
:cpp:class:`pdal::Dimension` defines the properties of the data channel like
its size in bytes, its name, and its interpretation. 


.. warning::

    As of this writing, :cpp:class:`pdal::Stage` also has a
    :cpp:class:`pdal::Schema` instance, but this merely exists to collect the
    :cpp:class:`pdal::Dimension` s that a :cpp:class:`pdal::Stage` is currently
    capable of providing. The model is likely to change to simply providing 
    a list of :cpp:class:`pdal::Dimension` instances that are available, and the 
    person composing the :cpp:class:`pdal::Schema` will worry about their 
    order and other schema properties.

.. _`Matryoshka dolls`: http://en.wikipedia.org/wiki/Matryoshka_doll

A basic example
..............................................................................

.. note::
    https://github.com/PDAL/PDAL/blob/master/test/data/pipeline/ contains 
    test suite pipeline files that provide an excellent example of the 
    currently possible operations.
    
Let's start with the following basic example.  

::

    <?xml version="1.0" encoding="utf-8"?>
    <Pipeline version="1.0">
        <Writer type="drivers.las.writer">
            <Option name="filename">
                output.las
            </Option>
            <Reader type="drivers.las.reader">
                <Option name="filename">
                ./path/to/my/file.las
                </Option>
            </Reader>
        </Writer>
    </Pipeline>
    
    

