/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.1
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace Libpc {

using System;
using System.Runtime.InteropServices;

class libpc_swig_cppPINVOKE {

  protected class SWIGExceptionHelper {

    public delegate void ExceptionDelegate(string message);
    public delegate void ExceptionArgumentDelegate(string message, string paramName);

    static ExceptionDelegate applicationDelegate = new ExceptionDelegate(SetPendingApplicationException);
    static ExceptionDelegate arithmeticDelegate = new ExceptionDelegate(SetPendingArithmeticException);
    static ExceptionDelegate divideByZeroDelegate = new ExceptionDelegate(SetPendingDivideByZeroException);
    static ExceptionDelegate indexOutOfRangeDelegate = new ExceptionDelegate(SetPendingIndexOutOfRangeException);
    static ExceptionDelegate invalidCastDelegate = new ExceptionDelegate(SetPendingInvalidCastException);
    static ExceptionDelegate invalidOperationDelegate = new ExceptionDelegate(SetPendingInvalidOperationException);
    static ExceptionDelegate ioDelegate = new ExceptionDelegate(SetPendingIOException);
    static ExceptionDelegate nullReferenceDelegate = new ExceptionDelegate(SetPendingNullReferenceException);
    static ExceptionDelegate outOfMemoryDelegate = new ExceptionDelegate(SetPendingOutOfMemoryException);
    static ExceptionDelegate overflowDelegate = new ExceptionDelegate(SetPendingOverflowException);
    static ExceptionDelegate systemDelegate = new ExceptionDelegate(SetPendingSystemException);

    static ExceptionArgumentDelegate argumentDelegate = new ExceptionArgumentDelegate(SetPendingArgumentException);
    static ExceptionArgumentDelegate argumentNullDelegate = new ExceptionArgumentDelegate(SetPendingArgumentNullException);
    static ExceptionArgumentDelegate argumentOutOfRangeDelegate = new ExceptionArgumentDelegate(SetPendingArgumentOutOfRangeException);

    [DllImport("libpc_swig_cpp", EntryPoint="SWIGRegisterExceptionCallbacks_libpc_swig_cpp")]
    public static extern void SWIGRegisterExceptionCallbacks_libpc_swig_cpp(
                                ExceptionDelegate applicationDelegate,
                                ExceptionDelegate arithmeticDelegate,
                                ExceptionDelegate divideByZeroDelegate, 
                                ExceptionDelegate indexOutOfRangeDelegate, 
                                ExceptionDelegate invalidCastDelegate,
                                ExceptionDelegate invalidOperationDelegate,
                                ExceptionDelegate ioDelegate,
                                ExceptionDelegate nullReferenceDelegate,
                                ExceptionDelegate outOfMemoryDelegate, 
                                ExceptionDelegate overflowDelegate, 
                                ExceptionDelegate systemExceptionDelegate);

    [DllImport("libpc_swig_cpp", EntryPoint="SWIGRegisterExceptionArgumentCallbacks_libpc_swig_cpp")]
    public static extern void SWIGRegisterExceptionCallbacksArgument_libpc_swig_cpp(
                                ExceptionArgumentDelegate argumentDelegate,
                                ExceptionArgumentDelegate argumentNullDelegate,
                                ExceptionArgumentDelegate argumentOutOfRangeDelegate);

    static void SetPendingApplicationException(string message) {
      SWIGPendingException.Set(new System.ApplicationException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingArithmeticException(string message) {
      SWIGPendingException.Set(new System.ArithmeticException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingDivideByZeroException(string message) {
      SWIGPendingException.Set(new System.DivideByZeroException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingIndexOutOfRangeException(string message) {
      SWIGPendingException.Set(new System.IndexOutOfRangeException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingInvalidCastException(string message) {
      SWIGPendingException.Set(new System.InvalidCastException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingInvalidOperationException(string message) {
      SWIGPendingException.Set(new System.InvalidOperationException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingIOException(string message) {
      SWIGPendingException.Set(new System.IO.IOException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingNullReferenceException(string message) {
      SWIGPendingException.Set(new System.NullReferenceException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingOutOfMemoryException(string message) {
      SWIGPendingException.Set(new System.OutOfMemoryException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingOverflowException(string message) {
      SWIGPendingException.Set(new System.OverflowException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingSystemException(string message) {
      SWIGPendingException.Set(new System.SystemException(message, SWIGPendingException.Retrieve()));
    }

    static void SetPendingArgumentException(string message, string paramName) {
      SWIGPendingException.Set(new System.ArgumentException(message, paramName, SWIGPendingException.Retrieve()));
    }
    static void SetPendingArgumentNullException(string message, string paramName) {
      Exception e = SWIGPendingException.Retrieve();
      if (e != null) message = message + " Inner Exception: " + e.Message;
      SWIGPendingException.Set(new System.ArgumentNullException(paramName, message));
    }
    static void SetPendingArgumentOutOfRangeException(string message, string paramName) {
      Exception e = SWIGPendingException.Retrieve();
      if (e != null) message = message + " Inner Exception: " + e.Message;
      SWIGPendingException.Set(new System.ArgumentOutOfRangeException(paramName, message));
    }

    static SWIGExceptionHelper() {
      SWIGRegisterExceptionCallbacks_libpc_swig_cpp(
                                applicationDelegate,
                                arithmeticDelegate,
                                divideByZeroDelegate,
                                indexOutOfRangeDelegate,
                                invalidCastDelegate,
                                invalidOperationDelegate,
                                ioDelegate,
                                nullReferenceDelegate,
                                outOfMemoryDelegate,
                                overflowDelegate,
                                systemDelegate);

      SWIGRegisterExceptionCallbacksArgument_libpc_swig_cpp(
                                argumentDelegate,
                                argumentNullDelegate,
                                argumentOutOfRangeDelegate);
    }
  }

  protected static SWIGExceptionHelper swigExceptionHelper = new SWIGExceptionHelper();

  public class SWIGPendingException {
    [ThreadStatic]
    private static Exception pendingException = null;
    private static int numExceptionsPending = 0;

    public static bool Pending {
      get {
        bool pending = false;
        if (numExceptionsPending > 0)
          if (pendingException != null)
            pending = true;
        return pending;
      } 
    }

    public static void Set(Exception e) {
      if (pendingException != null)
        throw new ApplicationException("FATAL: An earlier pending exception from unmanaged code was missed and thus not thrown (" + pendingException.ToString() + ")", e);
      pendingException = e;
      lock(typeof(libpc_swig_cppPINVOKE)) {
        numExceptionsPending++;
      }
    }

    public static Exception Retrieve() {
      Exception e = null;
      if (numExceptionsPending > 0) {
        if (pendingException != null) {
          e = pendingException;
          pendingException = null;
          lock(typeof(libpc_swig_cppPINVOKE)) {
            numExceptionsPending--;
          }
        }
      }
      return e;
    }
  }


  protected class SWIGStringHelper {

    public delegate string SWIGStringDelegate(string message);
    static SWIGStringDelegate stringDelegate = new SWIGStringDelegate(CreateString);

    [DllImport("libpc_swig_cpp", EntryPoint="SWIGRegisterStringCallback_libpc_swig_cpp")]
    public static extern void SWIGRegisterStringCallback_libpc_swig_cpp(SWIGStringDelegate stringDelegate);

    static string CreateString(string cString) {
      return cString;
    }

    static SWIGStringHelper() {
      SWIGRegisterStringCallback_libpc_swig_cpp(stringDelegate);
    }
  }

  static protected SWIGStringHelper swigStringHelper = new SWIGStringHelper();


  static libpc_swig_cppPINVOKE() {
  }


  [DllImport("libpc_swig_cpp", EntryPoint="CSharp_VectorU8_Clear")]
  public static extern void VectorU8_Clear(HandleRef jarg1);

  [DllImport("libpc_swig_cpp", EntryPoint="CSharp_VectorU8_Add")]
  public static extern void VectorU8_Add(HandleRef jarg1, byte jarg2);

  [DllImport("libpc_swig_cpp", EntryPoint="CSharp_VectorU8_size")]
  public static extern uint VectorU8_size(HandleRef jarg1);

  [DllImport("libpc_swig_cpp", EntryPoint="CSharp_VectorU8_capacity")]
  public static extern uint VectorU8_capacity(HandleRef jarg1);

  [DllImport("libpc_swig_cpp", EntryPoint="CSharp_VectorU8_reserve")]
  public static extern void VectorU8_reserve(HandleRef jarg1, uint jarg2);

  [DllImport("libpc_swig_cpp", EntryPoint="CSharp_new_VectorU8__SWIG_0")]
  public static extern IntPtr new_VectorU8__SWIG_0();

  [DllImport("libpc_swig_cpp", EntryPoint="CSharp_new_VectorU8__SWIG_1")]
  public static extern IntPtr new_VectorU8__SWIG_1(HandleRef jarg1);

  [DllImport("libpc_swig_cpp", EntryPoint="CSharp_new_VectorU8__SWIG_2")]
  public static extern IntPtr new_VectorU8__SWIG_2(int jarg1);

  [DllImport("libpc_swig_cpp", EntryPoint="CSharp_VectorU8_getitemcopy")]
  public static extern byte VectorU8_getitemcopy(HandleRef jarg1, int jarg2);

  [DllImport("libpc_swig_cpp", EntryPoint="CSharp_VectorU8_getitem")]
  public static extern byte VectorU8_getitem(HandleRef jarg1, int jarg2);

  [DllImport("libpc_swig_cpp", EntryPoint="CSharp_VectorU8_setitem")]
  public static extern void VectorU8_setitem(HandleRef jarg1, int jarg2, byte jarg3);

  [DllImport("libpc_swig_cpp", EntryPoint="CSharp_VectorU8_AddRange")]
  public static extern void VectorU8_AddRange(HandleRef jarg1, HandleRef jarg2);

  [DllImport("libpc_swig_cpp", EntryPoint="CSharp_VectorU8_GetRange")]
  public static extern IntPtr VectorU8_GetRange(HandleRef jarg1, int jarg2, int jarg3);

  [DllImport("libpc_swig_cpp", EntryPoint="CSharp_VectorU8_Insert")]
  public static extern void VectorU8_Insert(HandleRef jarg1, int jarg2, byte jarg3);

  [DllImport("libpc_swig_cpp", EntryPoint="CSharp_VectorU8_InsertRange")]
  public static extern void VectorU8_InsertRange(HandleRef jarg1, int jarg2, HandleRef jarg3);

  [DllImport("libpc_swig_cpp", EntryPoint="CSharp_VectorU8_RemoveAt")]
  public static extern void VectorU8_RemoveAt(HandleRef jarg1, int jarg2);

  [DllImport("libpc_swig_cpp", EntryPoint="CSharp_VectorU8_RemoveRange")]
  public static extern void VectorU8_RemoveRange(HandleRef jarg1, int jarg2, int jarg3);

  [DllImport("libpc_swig_cpp", EntryPoint="CSharp_VectorU8_Repeat")]
  public static extern IntPtr VectorU8_Repeat(byte jarg1, int jarg2);

  [DllImport("libpc_swig_cpp", EntryPoint="CSharp_VectorU8_Reverse__SWIG_0")]
  public static extern void VectorU8_Reverse__SWIG_0(HandleRef jarg1);

  [DllImport("libpc_swig_cpp", EntryPoint="CSharp_VectorU8_Reverse__SWIG_1")]
  public static extern void VectorU8_Reverse__SWIG_1(HandleRef jarg1, int jarg2, int jarg3);

  [DllImport("libpc_swig_cpp", EntryPoint="CSharp_VectorU8_SetRange")]
  public static extern void VectorU8_SetRange(HandleRef jarg1, int jarg2, HandleRef jarg3);

  [DllImport("libpc_swig_cpp", EntryPoint="CSharp_VectorU8_Contains")]
  public static extern bool VectorU8_Contains(HandleRef jarg1, byte jarg2);

  [DllImport("libpc_swig_cpp", EntryPoint="CSharp_VectorU8_IndexOf")]
  public static extern int VectorU8_IndexOf(HandleRef jarg1, byte jarg2);

  [DllImport("libpc_swig_cpp", EntryPoint="CSharp_VectorU8_LastIndexOf")]
  public static extern int VectorU8_LastIndexOf(HandleRef jarg1, byte jarg2);

  [DllImport("libpc_swig_cpp", EntryPoint="CSharp_VectorU8_Remove")]
  public static extern bool VectorU8_Remove(HandleRef jarg1, byte jarg2);

  [DllImport("libpc_swig_cpp", EntryPoint="CSharp_delete_VectorU8")]
  public static extern void delete_VectorU8(HandleRef jarg1);

  [DllImport("libpc_swig_cpp", EntryPoint="CSharp_VectorU32_Clear")]
  public static extern void VectorU32_Clear(HandleRef jarg1);

  [DllImport("libpc_swig_cpp", EntryPoint="CSharp_VectorU32_Add")]
  public static extern void VectorU32_Add(HandleRef jarg1, uint jarg2);

  [DllImport("libpc_swig_cpp", EntryPoint="CSharp_VectorU32_size")]
  public static extern uint VectorU32_size(HandleRef jarg1);

  [DllImport("libpc_swig_cpp", EntryPoint="CSharp_VectorU32_capacity")]
  public static extern uint VectorU32_capacity(HandleRef jarg1);

  [DllImport("libpc_swig_cpp", EntryPoint="CSharp_VectorU32_reserve")]
  public static extern void VectorU32_reserve(HandleRef jarg1, uint jarg2);

  [DllImport("libpc_swig_cpp", EntryPoint="CSharp_new_VectorU32__SWIG_0")]
  public static extern IntPtr new_VectorU32__SWIG_0();

  [DllImport("libpc_swig_cpp", EntryPoint="CSharp_new_VectorU32__SWIG_1")]
  public static extern IntPtr new_VectorU32__SWIG_1(HandleRef jarg1);

  [DllImport("libpc_swig_cpp", EntryPoint="CSharp_new_VectorU32__SWIG_2")]
  public static extern IntPtr new_VectorU32__SWIG_2(int jarg1);

  [DllImport("libpc_swig_cpp", EntryPoint="CSharp_VectorU32_getitemcopy")]
  public static extern uint VectorU32_getitemcopy(HandleRef jarg1, int jarg2);

  [DllImport("libpc_swig_cpp", EntryPoint="CSharp_VectorU32_getitem")]
  public static extern uint VectorU32_getitem(HandleRef jarg1, int jarg2);

  [DllImport("libpc_swig_cpp", EntryPoint="CSharp_VectorU32_setitem")]
  public static extern void VectorU32_setitem(HandleRef jarg1, int jarg2, uint jarg3);

  [DllImport("libpc_swig_cpp", EntryPoint="CSharp_VectorU32_AddRange")]
  public static extern void VectorU32_AddRange(HandleRef jarg1, HandleRef jarg2);

  [DllImport("libpc_swig_cpp", EntryPoint="CSharp_VectorU32_GetRange")]
  public static extern IntPtr VectorU32_GetRange(HandleRef jarg1, int jarg2, int jarg3);

  [DllImport("libpc_swig_cpp", EntryPoint="CSharp_VectorU32_Insert")]
  public static extern void VectorU32_Insert(HandleRef jarg1, int jarg2, uint jarg3);

  [DllImport("libpc_swig_cpp", EntryPoint="CSharp_VectorU32_InsertRange")]
  public static extern void VectorU32_InsertRange(HandleRef jarg1, int jarg2, HandleRef jarg3);

  [DllImport("libpc_swig_cpp", EntryPoint="CSharp_VectorU32_RemoveAt")]
  public static extern void VectorU32_RemoveAt(HandleRef jarg1, int jarg2);

  [DllImport("libpc_swig_cpp", EntryPoint="CSharp_VectorU32_RemoveRange")]
  public static extern void VectorU32_RemoveRange(HandleRef jarg1, int jarg2, int jarg3);

  [DllImport("libpc_swig_cpp", EntryPoint="CSharp_VectorU32_Repeat")]
  public static extern IntPtr VectorU32_Repeat(uint jarg1, int jarg2);

  [DllImport("libpc_swig_cpp", EntryPoint="CSharp_VectorU32_Reverse__SWIG_0")]
  public static extern void VectorU32_Reverse__SWIG_0(HandleRef jarg1);

  [DllImport("libpc_swig_cpp", EntryPoint="CSharp_VectorU32_Reverse__SWIG_1")]
  public static extern void VectorU32_Reverse__SWIG_1(HandleRef jarg1, int jarg2, int jarg3);

  [DllImport("libpc_swig_cpp", EntryPoint="CSharp_VectorU32_SetRange")]
  public static extern void VectorU32_SetRange(HandleRef jarg1, int jarg2, HandleRef jarg3);

  [DllImport("libpc_swig_cpp", EntryPoint="CSharp_VectorU32_Contains")]
  public static extern bool VectorU32_Contains(HandleRef jarg1, uint jarg2);

  [DllImport("libpc_swig_cpp", EntryPoint="CSharp_VectorU32_IndexOf")]
  public static extern int VectorU32_IndexOf(HandleRef jarg1, uint jarg2);

  [DllImport("libpc_swig_cpp", EntryPoint="CSharp_VectorU32_LastIndexOf")]
  public static extern int VectorU32_LastIndexOf(HandleRef jarg1, uint jarg2);

  [DllImport("libpc_swig_cpp", EntryPoint="CSharp_VectorU32_Remove")]
  public static extern bool VectorU32_Remove(HandleRef jarg1, uint jarg2);

  [DllImport("libpc_swig_cpp", EntryPoint="CSharp_delete_VectorU32")]
  public static extern void delete_VectorU32(HandleRef jarg1);

  [DllImport("libpc_swig_cpp", EntryPoint="CSharp_new_Dimension")]
  public static extern IntPtr new_Dimension(string jarg1, int jarg2);

  [DllImport("libpc_swig_cpp", EntryPoint="CSharp_Dimension_getName")]
  public static extern string Dimension_getName(HandleRef jarg1);

  [DllImport("libpc_swig_cpp", EntryPoint="CSharp_Dimension_getDataType")]
  public static extern int Dimension_getDataType(HandleRef jarg1);

  [DllImport("libpc_swig_cpp", EntryPoint="CSharp_Dimension_getDataTypeName")]
  public static extern string Dimension_getDataTypeName(int jarg1);

  [DllImport("libpc_swig_cpp", EntryPoint="CSharp_Dimension_getDataTypeFromString")]
  public static extern int Dimension_getDataTypeFromString(string jarg1);

  [DllImport("libpc_swig_cpp", EntryPoint="CSharp_Dimension_getDataTypeSize")]
  public static extern uint Dimension_getDataTypeSize(int jarg1);

  [DllImport("libpc_swig_cpp", EntryPoint="CSharp_Dimension_getDataTypeIsNumeric")]
  public static extern bool Dimension_getDataTypeIsNumeric(int jarg1);

  [DllImport("libpc_swig_cpp", EntryPoint="CSharp_Dimension_getDataTypeIsSigned")]
  public static extern bool Dimension_getDataTypeIsSigned(int jarg1);

  [DllImport("libpc_swig_cpp", EntryPoint="CSharp_Dimension_getDataTypeIsInteger")]
  public static extern bool Dimension_getDataTypeIsInteger(int jarg1);

  [DllImport("libpc_swig_cpp", EntryPoint="CSharp_Dimension_getByteSize")]
  public static extern uint Dimension_getByteSize(HandleRef jarg1);

  [DllImport("libpc_swig_cpp", EntryPoint="CSharp_Dimension_getDescription")]
  public static extern string Dimension_getDescription(HandleRef jarg1);

  [DllImport("libpc_swig_cpp", EntryPoint="CSharp_Dimension_setDescription")]
  public static extern void Dimension_setDescription(HandleRef jarg1, string jarg2);

  [DllImport("libpc_swig_cpp", EntryPoint="CSharp_Dimension_isNumeric")]
  public static extern bool Dimension_isNumeric(HandleRef jarg1);

  [DllImport("libpc_swig_cpp", EntryPoint="CSharp_Dimension_isSigned")]
  public static extern bool Dimension_isSigned(HandleRef jarg1);

  [DllImport("libpc_swig_cpp", EntryPoint="CSharp_Dimension_isInteger")]
  public static extern bool Dimension_isInteger(HandleRef jarg1);

  [DllImport("libpc_swig_cpp", EntryPoint="CSharp_Dimension_getMinimum")]
  public static extern double Dimension_getMinimum(HandleRef jarg1);

  [DllImport("libpc_swig_cpp", EntryPoint="CSharp_Dimension_setMinimum")]
  public static extern void Dimension_setMinimum(HandleRef jarg1, double jarg2);

  [DllImport("libpc_swig_cpp", EntryPoint="CSharp_Dimension_getMaximum")]
  public static extern double Dimension_getMaximum(HandleRef jarg1);

  [DllImport("libpc_swig_cpp", EntryPoint="CSharp_Dimension_setMaximum")]
  public static extern void Dimension_setMaximum(HandleRef jarg1, double jarg2);

  [DllImport("libpc_swig_cpp", EntryPoint="CSharp_Dimension_getNumericScale")]
  public static extern double Dimension_getNumericScale(HandleRef jarg1);

  [DllImport("libpc_swig_cpp", EntryPoint="CSharp_Dimension_setNumericScale")]
  public static extern void Dimension_setNumericScale(HandleRef jarg1, double jarg2);

  [DllImport("libpc_swig_cpp", EntryPoint="CSharp_Dimension_getNumericOffset")]
  public static extern double Dimension_getNumericOffset(HandleRef jarg1);

  [DllImport("libpc_swig_cpp", EntryPoint="CSharp_Dimension_setNumericOffset")]
  public static extern void Dimension_setNumericOffset(HandleRef jarg1, double jarg2);

  [DllImport("libpc_swig_cpp", EntryPoint="CSharp_Dimension_isFinitePrecision__SWIG_0")]
  public static extern bool Dimension_isFinitePrecision__SWIG_0(HandleRef jarg1);

  [DllImport("libpc_swig_cpp", EntryPoint="CSharp_Dimension_isFinitePrecision__SWIG_1")]
  public static extern void Dimension_isFinitePrecision__SWIG_1(HandleRef jarg1, bool jarg2);

  [DllImport("libpc_swig_cpp", EntryPoint="CSharp_delete_Dimension")]
  public static extern void delete_Dimension(HandleRef jarg1);
}

}
