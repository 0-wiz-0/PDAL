/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.1
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace Libpc {

using System;
using System.Runtime.InteropServices;

public class Dimension : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Dimension(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(Dimension obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~Dimension() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          libpc_swig_cppPINVOKE.delete_Dimension(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public Dimension(string name, Dimension.DataType type) : this(libpc_swig_cppPINVOKE.new_Dimension(name, (int)type), true) {
    if (libpc_swig_cppPINVOKE.SWIGPendingException.Pending) throw libpc_swig_cppPINVOKE.SWIGPendingException.Retrieve();
  }

  public string getName() {
    string ret = libpc_swig_cppPINVOKE.Dimension_getName(swigCPtr);
    return ret;
  }

  public Dimension.DataType getDataType() {
    Dimension.DataType ret = (Dimension.DataType)libpc_swig_cppPINVOKE.Dimension_getDataType(swigCPtr);
    return ret;
  }

  public static string getDataTypeName(Dimension.DataType arg0) {
    string ret = libpc_swig_cppPINVOKE.Dimension_getDataTypeName((int)arg0);
    return ret;
  }

  public static Dimension.DataType getDataTypeFromString(string arg0) {
    Dimension.DataType ret = (Dimension.DataType)libpc_swig_cppPINVOKE.Dimension_getDataTypeFromString(arg0);
    if (libpc_swig_cppPINVOKE.SWIGPendingException.Pending) throw libpc_swig_cppPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint getDataTypeSize(Dimension.DataType arg0) {
    uint ret = libpc_swig_cppPINVOKE.Dimension_getDataTypeSize((int)arg0);
    return ret;
  }

  public static bool getDataTypeIsNumeric(Dimension.DataType arg0) {
    bool ret = libpc_swig_cppPINVOKE.Dimension_getDataTypeIsNumeric((int)arg0);
    return ret;
  }

  public static bool getDataTypeIsSigned(Dimension.DataType arg0) {
    bool ret = libpc_swig_cppPINVOKE.Dimension_getDataTypeIsSigned((int)arg0);
    return ret;
  }

  public static bool getDataTypeIsInteger(Dimension.DataType arg0) {
    bool ret = libpc_swig_cppPINVOKE.Dimension_getDataTypeIsInteger((int)arg0);
    return ret;
  }

  public uint getByteSize() {
    uint ret = libpc_swig_cppPINVOKE.Dimension_getByteSize(swigCPtr);
    return ret;
  }

  public string getDescription() {
    string ret = libpc_swig_cppPINVOKE.Dimension_getDescription(swigCPtr);
    return ret;
  }

  public void setDescription(string v) {
    libpc_swig_cppPINVOKE.Dimension_setDescription(swigCPtr, v);
    if (libpc_swig_cppPINVOKE.SWIGPendingException.Pending) throw libpc_swig_cppPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool isNumeric() {
    bool ret = libpc_swig_cppPINVOKE.Dimension_isNumeric(swigCPtr);
    return ret;
  }

  public bool isSigned() {
    bool ret = libpc_swig_cppPINVOKE.Dimension_isSigned(swigCPtr);
    return ret;
  }

  public bool isInteger() {
    bool ret = libpc_swig_cppPINVOKE.Dimension_isInteger(swigCPtr);
    return ret;
  }

  public double getMinimum() {
    double ret = libpc_swig_cppPINVOKE.Dimension_getMinimum(swigCPtr);
    return ret;
  }

  public void setMinimum(double min) {
    libpc_swig_cppPINVOKE.Dimension_setMinimum(swigCPtr, min);
  }

  public double getMaximum() {
    double ret = libpc_swig_cppPINVOKE.Dimension_getMaximum(swigCPtr);
    return ret;
  }

  public void setMaximum(double max) {
    libpc_swig_cppPINVOKE.Dimension_setMaximum(swigCPtr, max);
  }

  public double getNumericScale() {
    double ret = libpc_swig_cppPINVOKE.Dimension_getNumericScale(swigCPtr);
    return ret;
  }

  public void setNumericScale(double v) {
    libpc_swig_cppPINVOKE.Dimension_setNumericScale(swigCPtr, v);
  }

  public double getNumericOffset() {
    double ret = libpc_swig_cppPINVOKE.Dimension_getNumericOffset(swigCPtr);
    return ret;
  }

  public void setNumericOffset(double v) {
    libpc_swig_cppPINVOKE.Dimension_setNumericOffset(swigCPtr, v);
  }

  public bool isFinitePrecision() {
    bool ret = libpc_swig_cppPINVOKE.Dimension_isFinitePrecision__SWIG_0(swigCPtr);
    return ret;
  }

  public void isFinitePrecision(bool v) {
    libpc_swig_cppPINVOKE.Dimension_isFinitePrecision__SWIG_1(swigCPtr, v);
  }

  public enum DataType {
    Int8,
    Uint8,
    Int16,
    Uint16,
    Int32,
    Uint32,
    Int64,
    Uint64,
    Float,
    Double
  }

}

}
